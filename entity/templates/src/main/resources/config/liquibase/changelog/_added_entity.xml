<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <property name="now" value="now()" dbms="mysql,h2"/>
    <property name="now" value="current_timestamp" dbms="postgresql"/>

    <!--
        Added the entity <%= entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>" author="jhipster">
        <createTable tableName="T_<%= name.toUpperCase() %>"><%if (pkManagedByJHipster == true) { %>
            <column name="id" type="bigint" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column><% } for (fieldId in fields) {
            if (fields[fieldId].fieldType == 'String') { %>
            <column name="<%=fields[fieldId].fieldNameUnderscored %>" type="varchar(255)"><%if (fields[fieldId].isPk == true) { %>
                <constraints primaryKey="true" nullable="false"/><% } %>
            </column><% } else if (fields[fieldId].fieldType == 'Integer') { %>
            <column name="<%=fields[fieldId].fieldNameUnderscored %>" type="integer"><%if (fields[fieldId].isPk == true) { %>
                <constraints primaryKey="true" nullable="false"/><% } %>
            </column><% } else if (fields[fieldId].fieldType == 'Long') { %>
            <column name="<%=fields[fieldId].fieldNameUnderscored %>" type="bigint"><%if (fields[fieldId].isPk == true) { %>
                <constraints primaryKey="true" nullable="false"/><% } %>
            </column><% } else if (fields[fieldId].fieldType == 'BigDecimal') { %>
            <column name="<%=fields[fieldId].fieldNameUnderscored %>" type="decimal(10,2)"><%if (fields[fieldId].isPk == true) { %>
                <constraints primaryKey="true" nullable="false"/><% } %>
            </column><% } else if (fields[fieldId].fieldType == 'LocalDate') { %>
            <column name="<%=fields[fieldId].fieldNameUnderscored %>" type="date"><%if (fields[fieldId].isPk == true) { %>
                <constraints primaryKey="true" nullable="false"/><% } %>
            </column><% } else if (fields[fieldId].fieldType == 'DateTime') { %>
            <column name="<%=fields[fieldId].fieldNameUnderscored %>" type="timestamp">
                <constraints nullable="false" <%if (fields[fieldId].isPk == true) { %> primaryKey="true" <% } %>/>
            </column><% } else if (fields[fieldId].fieldType == 'Boolean') { %>
            <column name="<%=fields[fieldId].fieldNameUnderscored %>" type="bit"><%if (fields[fieldId].isPk == true) { %>
                <constraints primaryKey="true" nullable="false"/><% } %>
            </column><% } } %><% for (relationshipId in relationships) { %><% if ((relationships[relationshipId].relationshipType == 'many-to-one') || (relationships[relationshipId].relationshipType == 'one-to-one' && relationships[relationshipId].ownerSide == true)) { %>
            <column name="<%=relationships[relationshipId].relationshipName.toLowerCase() %>_id" type="bigint"/><% } } %>
        </createTable><% for (fieldId in fields) {
            if (fields[fieldId].fieldType == 'DateTime') { %>
        <dropDefaultValue tableName="T_<%= name.toUpperCase() %>" columnName="<%=fields[fieldId].fieldNameUnderscored %>" columnDataType="datetime"/>
<% } } %>
        <% for (relationshipId in relationships) { %><% if ((relationships[relationshipId].relationshipType == 'many-to-one') || ((relationships[relationshipId].relationshipType == 'one-to-one')) && (relationships[relationshipId].ownerSide == true)) { %>
        <addForeignKeyConstraint baseColumnNames="<%= relationships[relationshipId].relationshipName.toLowerCase() %>_id"
                                 baseTableName="T_<%= name.toUpperCase() %>"
                                 constraintName="fk_<%= name.toLowerCase() %>_<%= relationships[relationshipId].relationshipName.toLowerCase() %>_id"
                                 referencedColumnNames="id"
                                 referencedTableName="T_<%= relationships[relationshipId].otherEntityName.toUpperCase() %>"/>
<% } else if ((relationships[relationshipId].relationshipType == 'many-to-many') && (relationships[relationshipId].ownerSide == true)) {
   var joinTableName = 'T_' + name.toUpperCase() + '_'+ relationships[relationshipId].relationshipName.toUpperCase();
  %>
        <createTable tableName="<%= joinTableName %>">
            <column name="<%= relationships[relationshipId].otherEntityName %>s_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="<%= relationships[relationshipId].relationshipName %>s_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addPrimaryKey columnNames="<%= relationships[relationshipId].relationshipName %>s_id, <%= relationships[relationshipId].otherEntityName %>_id" tableName="<%= joinTableName %>"/>

        <addForeignKeyConstraint baseColumnNames="<%= relationships[relationshipId].otherEntityName %>s_id"
                                 baseTableName="<%= joinTableName %>"
                                 constraintName="fk_<%= name.toLowerCase() %>_<%= relationships[relationshipId].relationshipName.toLowerCase() %>_id"
                                 referencedColumnNames="id"
                                 referencedTableName="T_<%= relationships[relationshipId].otherEntityName.toUpperCase() %>"/>

        <addForeignKeyConstraint baseColumnNames="<%= relationships[relationshipId].relationshipName %>s_id"
                                 baseTableName="<%= joinTableName %>"
                                 constraintName="fk_<%= relationships[relationshipId].otherEntityName.toLowerCase() %>_<%= name.toLowerCase() %>_id"
                                 referencedColumnNames="id"
                                 referencedTableName="T_<%= name.toUpperCase() %>"/>
        <% } %><% } %>
    </changeSet>
</databaseChangeLog>
